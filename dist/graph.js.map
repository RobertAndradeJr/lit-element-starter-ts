{"version":3,"file":"graph.js","sourceRoot":"","sources":["../src/graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { QUADRANT_LABELS } from \"./util/constants\"\n\ninterface Props {\n  ctx: CanvasRenderingContext2D\n  radius?: number\n  borderWidth?: number\n  colors?: string[]\n}\nexport class Graph {\n  height: number\n  width: number\n  cx: number\n  cy: number\n  radius: number\n  borderWidth: number\n  ctx: CanvasRenderingContext2D\n  mapRadius: number\n  borderRadius: number\n  colors: string[]\n\n  constructor({\n    radius = 50, ctx = new CanvasRenderingContext2D, borderWidth = 5, colors = [\n      `rgba(0,149,59,1)`,\n      `rgba(199,50,58,1)`,\n      `rgba(0,148,201,1)`,\n      `rgba(241,200,49,1)`,\n    ]\n\n  }: Props) {\n    this.colors = colors\n    this.height = radius * 2\n    this.width = radius * 2\n    this.borderWidth = borderWidth\n    this.ctx = ctx\n    this.radius = this.width / 2\n    // padding between circle and border\n    // removing 1 border width meets outer border\n    // then 2 border widths of padding\n    this.mapRadius = this.radius - (this.borderWidth * 3)\n    // half of border width to have full border in frame\n    // since stroke is half inside half outside of line\n    // and radius goes up to edge of box\n    this.borderRadius = this.radius - (this.borderWidth / 2)\n    this.cx = radius\n    this.cy = radius\n    this.ctx.lineWidth = borderWidth\n  }\n\n  baseGraph() {\n    const { cx, cy, mapRadius: radius, ctx } = this\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(cx, cy)\n    ctx.arc(cx, cy, radius, 0, Math.PI * 2)\n    ctx.fillStyle = 'rgba(128,128,128,1)'\n    ctx.strokeStyle = 'rgba(128,128,128,0.15)'\n    ctx.closePath()\n    ctx.fill()\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  internalBorderHorizontal() {\n    const { height, width, ctx } = this\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(0, height / 2)\n    ctx.lineTo(width, height / 2)\n    ctx.strokeStyle = 'white'\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  internalBorderVertical() {\n    const { height, width, ctx } = this\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(width / 2, 0)\n    ctx.lineTo(width / 2, height)\n    ctx.strokeStyle = 'white'\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  dashBorder(border = '#000') {\n    const { cx, cy, borderRadius: radius, ctx } = this\n    ctx.save()\n    ctx.moveTo(cx, cy)\n    ctx.beginPath()\n    ctx.arc(cx, cy, radius, 0, Math.PI * 2)\n    ctx.strokeStyle = border\n    ctx.setLineDash([15, 10])\n    ctx.closePath()\n    ctx.stroke()\n    ctx.restore()\n  }\n\n  drawQuadrants(quadrants = QUADRANT_LABELS) {\n    const { colors } = this\n    for (let i = 0; i < colors.length; i++) {\n      if (quadrants.includes(QUADRANT_LABELS[i])) {\n        // need offset so drawing starts from top left \n        // quadrant, or 'D' style quadrant\n        const angleOffset = i + 2\n        const startAngle = (angleOffset * Math.PI) / 2\n        const endAngle = startAngle + Math.PI / 2\n        const emphasis = QUADRANT_LABELS.length - quadrants.length\n        this.drawQuadrant(emphasis, startAngle, endAngle, colors[i], colors[i])\n      }\n    }\n  }\n\n  drawQuadrant(\n    emphasis = 0,\n    startAngle = 0,\n    endAngle = Math.PI / 2,\n    fill = '#000',\n    stroke = '#fff'\n  ) {\n    const { cx, cy, mapRadius: radius, ctx } = this\n\n    ctx.beginPath()\n    ctx.moveTo(cx, cy)\n    ctx.arc(cx, cy, radius + emphasis, startAngle, endAngle)\n    ctx.closePath()\n    ctx.fillStyle = fill\n    ctx.strokeStyle = stroke\n    ctx.fill()\n    ctx.stroke()\n  }\n}"]}